# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Azure Web App - API

on:
  push:
    branches:
      - main # <--- Ensure this is the correct branch for your API project deployment
    paths:
      - 'backend/**' # <--- Keep this if your API project is in a 'backend' subfolder

  pull_request:
    branches:
      - main # <--- Ensure this is the correct branch for your API project deployment
    paths:
      - 'backend/**' # <--- Keep this if your API project is in a 'backend' subfolder

  workflow_dispatch: # This line adds the manual trigger option

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read # This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'
          include-prerelease: true # Keep this for .NET 9 if it's still in preview

      - name: dotnet publish
        # IMPORTANT: Adjust this path if your .sln or .csproj file is not directly in 'backend/'
        # For example, if your solution is 'backend/MyApi.sln', this is correct.
        # If your API project is 'backend/src/MyApi/MyApi.csproj', you'd change the path accordingly.
        run: dotnet publish ./backend/SepantaProject.sln -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production' # <--- Crucial: This links to the Azure AD Federated Credential
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    permissions:
      id-token: write # <--- IMPORTANT: Required for requesting the JWT for OIDC login
      contents: read # Required for actions/checkout (implicitly used by download-artifact)

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      # THIS IS THE AZURE OIDC LOGIN STEP WITH YOUR NEWLY GENERATED SECRETS
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_B6484C5C885549E68E84C97FF488D5E7 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_0B2631CA5B0741EAAFC249D568E7A658 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_FCDE1590D6FF47CB8307BE8B2CD9F0A3 }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          # IMPORTANT: Make sure this app-name matches the Azure Web App you want to deploy to.
          # The newly generated one was 'wa-arshia-api-school'.
          # Your old one was 'da-api-mr'. You'll need to decide which app you're targeting.
          app-name: 'wa-arshia-api-school' # <--- Using the app name from the new setup
          slot-name: 'Production'
          package: . # Deploys the content of the downloaded artifact (.net-app)

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Clean up artifacts and publish directory
        # This step uses actions/checkout, which is typically for cleaning the repo
        # on the runner. For cleaning artifacts on GitHub itself, the `upload-artifact`
        # action has a 'retention-days' option or you can use other artifact actions.
        # This step is fine for local runner cleanup.
        uses: actions/checkout@v4
        with:
          clean: true
